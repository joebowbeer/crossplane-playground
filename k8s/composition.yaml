apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: vclusters.example.joebowbeer.com
spec:
  compositeTypeRef:
    apiVersion: example.joebowbeer.com/v1alpha1
    kind: VCluster
  mode: Pipeline
  pipeline:
  - step: pythonic
    functionRef:
      name: function-pythonic
    input:
      apiVersion: pythonic.fn.fortra.com/v1alpha1
      kind: Composite
      composite: |
        def argcd_secret_config(secret):
          config = Map()
          config.tlsClientConfig.insecure = True
          # ArgoCD wants the base64 encoded data
          config.tlsClientConfig.caData = secret.data['certificate-authority']
          config.tlsClientConfig.certData = secret.data['client-certificate']
          config.tlsClientConfig.keyData = secret.data['client-key']
          return config

        class Composite(BaseComposite):
          def compose(self):
            name = self.metadata.name
            namespace = name

            release = self.resources.release('helm.crossplane.io/v1beta1', 'Release', name=name)
            release.spec.forProvider.chart.repository = 'https://charts.loft.sh'
            release.spec.forProvider.chart.name = 'vcluster'
            release.spec.forProvider.chart.version = '0.26.0'
            release.spec.forProvider.namespace = namespace
            release.spec.forProvider.values = {
              'controlPlane': {
                'proxy': {
                  'extraSANs': [f'{name}.{namespace}']
                }
              }
            }
            # release.spec.forProvider.wait = True
            release.spec.providerConfigRef.name = 'helm-provider'
            release.spec.rollbackLimit = 1

            secret_name = f'vc-{name}'
            vcluster_secret = self.requireds.vcluster_secret('v1', 'Secret', namespace, secret_name)[0]
            if vcluster_secret:
              argocd_secret = self.resources.argocd_secret('v1', 'Secret', 'argocd', secret_name)
              argocd_secret.metadata.labels['argocd.argoproj.io/secret-type'] = 'cluster'
              argocd_secret.type = 'Opaque'
              argocd_secret.data = {
                'name': B64Encode(name),
                'server': B64Encode(f'https://{name}.{namespace}:443'),
                'config': B64Encode(format(argcd_secret_config(secret), 'json'))
              }
              argocd_secret.ready = argocd_secret.observed
            else:
              self.ready = False
            # print(str(self.response))
